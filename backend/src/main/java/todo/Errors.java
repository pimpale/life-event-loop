package todo;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public enum Errors {
  OK(HttpStatus.OK),
  NOT_FOUND(HttpStatus.NOT_FOUND),
  NO_CAPABILITY(HttpStatus.UNAUTHORIZED),

  API_KEY_UNAUTHORIZED(HttpStatus.UNAUTHORIZED),
  API_KEY_NONEXISTENT(HttpStatus.BAD_REQUEST),

  PASSWORD_INCORRECT(HttpStatus.UNAUTHORIZED),
  PASSWORD_INSECURE(HttpStatus.UNAUTHORIZED),
  PASSWORD_CANNOT_CREATE_FOR_OTHERS(HttpStatus.UNAUTHORIZED),

  USER_NONEXISTENT(HttpStatus.BAD_REQUEST),
  USER_EXISTENT(HttpStatus.BAD_REQUEST),
  USER_NAME_EMPTY(HttpStatus.BAD_REQUEST),
  USER_EMAIL_EMPTY(HttpStatus.BAD_REQUEST),
  USER_EMAIL_INVALIDATED(HttpStatus.BAD_REQUEST),
  USER_KIND_INVALID(HttpStatus.BAD_REQUEST),

  SUBSCRIPTION_NONEXISTENT(HttpStatus.BAD_REQUEST),
  SUBSCRIPTION_EXPIRED(HttpStatus.BAD_REQUEST),
  SUBSCRIPTION_UNAUTHORIZED(HttpStatus.BAD_REQUEST),
  SUBSCRIPTION_LIMITED(HttpStatus.BAD_REQUEST),

  VERIFICATION_CHALLENGE_NONEXISTENT(HttpStatus.BAD_REQUEST),
  VERIFICATION_CHALLENGE_TIMED_OUT(HttpStatus.BAD_REQUEST),

  PASSWORD_RESET_NONEXISTENT(HttpStatus.BAD_REQUEST),
  PASSWORD_EXISTENT(HttpStatus.BAD_REQUEST),
  PASSWORD_RESET_TIMED_OUT(HttpStatus.BAD_REQUEST),

  EMAIL_RATELIMIT(HttpStatus.TOO_MANY_REQUESTS),
  EMAIL_BLACKLISTED(HttpStatus.FORBIDDEN),

  GOAL_NONEXISTENT(HttpStatus.BAD_REQUEST),

  PAST_EVENT_NONEXISTENT(HttpStatus.BAD_REQUEST),

  TIME_UTILITY_FUNCTION_NONEXISTENT(HttpStatus.BAD_REQUEST),
  TIME_UTILITY_FUNCTION_NOT_VALID(HttpStatus.BAD_REQUEST),
  NEGATIVE_START_TIME(HttpStatus.BAD_REQUEST),
  NEGATIVE_DURATION(HttpStatus.BAD_REQUEST),
  CANNOT_ALTER_PAST(HttpStatus.BAD_REQUEST),

  UNKNOWN(HttpStatus.INTERNAL_SERVER_ERROR);

  private final HttpStatus httpStatus;

  private Errors(HttpStatus status) {
    this.httpStatus = status;
  }

  public ResponseEntity<?> getResponse() {
    return new ResponseEntity<>("\"" + this.name() + "\"", httpStatus);
  }
}
